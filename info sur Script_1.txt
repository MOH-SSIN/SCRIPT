-------> # ARCH 
COMMANDE : arch=$(uname -a)
EXPLICATION 
uname : donne simplement le nom du système d'exploitation ou du noyau sur lequel tourne ton système.
-a  : ffiche toutes les informations disponibles sur le système d'exploitation et le noyau


-------># CPU PHYSICAL
COMMANDE  : cpuf=$(grep "physical id" /proc/cpuinfo | sort -u | wc -l)
EXPLICATION
/proc/cpuinfo : Ce fichier contient des informations détaillées sur le ou les processeurs de la machine.
physical id : représente un identifiant unique pour chaque processeur physique.
sort : katratabe les ligne btartibe alfabitique 
-u : (unique) katratebe et Élimine les doublons
wc -l : Compte le nombre de lignes dans la sortie précédente


-------># CPU VIRTUAL
COMMANDE : cpuv=$(grep "processor" /proc/cpuinfo | wc -l)
EXPLICATION
/proc/cpuinfo : Ce fichier contient des informations détaillées sur le ou les processeurs de la machine.
processor : La ligne processor dans le fichier /proc/cpuinfo fait effectivement référence à chaque cœur logique,
wc -l : Compte le nombre de lignes dans la sortie précédente



---------> # RAM
COMMANDE : 
1) ram_total=$(free --mega | awk '$1 == "Mem:" {print $2}')
2) ram_use=$(free --mega | awk '$1 == "Mem:" {print $3}')
3) ram_percent=$(free --mega | awk '$1 == "Mem:" {printf("%.2f"), $3/$2*100}') 
EXPLICATION : 
1)ram_total=$(free --mega | awk '$1 == "Mem:" {print $2}')
But    : La commande affiche uniquement la quantité totale de RAM du système en mégaoctets (Mo),
free   : Cette commande affiche des informations sur l'utilisation de la mémoire de ton système
--mega : Cette option de free permet d'afficher les valeurs de la mémoire en mégaoctets (MB).
Mem   :fait référence à la mémoire RAM physique de ton système.
swap  :est de l'espace disque utilisé comme une extension de la mémoire RAM.
2) ram_use=$(free --mega | awk '$1 == "Mem:" {print $3}')
But : Cette commande affiche la quantité de mémoire libre dans le système, exprimée en mégaoctets (Mo)
awk est un langage de traitement de texte. Il est utilisé ici pour filtrer et manipuler les lignes de texte ligne par ligne.
3) ram_percent=$(free --mega | awk '$1 == "Mem:" {printf("%.2f"), $3/$2*100}') 
But : Cette commande calcule le pourcentage de mémoire libre en utilisant la mémoire libre et la mémoire totale,


----------# DISK
COMMANDE :
1) disk_total=$(df -m | grep "/dev/" | grep -v "/boot" | awk '{disk_t += $2} END {printf ("%.1fGb\n"), disk_t/1024}')
2) disk_use=$(df -m | grep "/dev/" | grep -v "/boot" | awk '{disk_u += $3} END {print disk_u}')
3) disk_percent=$(df -m | grep "/dev/" | grep -v "/boot" | awk '{disk_u += $3} {disk_t+= $2} END {printf("%d"), disk_u/disk_t*100}')
EXPLICATION

1) disk_total=$(df -m | grep "/dev/" | grep -v "/boot" | awk '{disk_t += $2} END {printf ("%.1fGb\n"), disk_t/1024}')
BUT :  calculer l'espace disque total (en Go) utilisé par toutes les partitions de type /dev/, kan7ydo la partition /boot
df -m : kt2afici lina les inf sur disk et poion -m en mégaoctets (Mo)
grep "/dev/" :  Sélectionner uniquement les partitions physiques (disques) liées à /dev/
grep -v "/boot" : Exclure la partition /boot
awk : dwre dyalha hna howa katb9a additionner l'espace total de chaque partition sélectionnée

2) disk_use=$(df -m | grep "/dev/" | grep -v "/boot" | awk '{disk_u += $3} END {print disk_u}')
BUT : La commande calcule l'espace total UTLISÉ (en Mo) par toutes les partitions physiques (de type /dev/), en excluant la partition /boot

3) disk_percent=$(df -m | grep "/dev/" | grep -v "/boot" | awk '{disk_u += $3} {disk_t+= $2} END {printf("%d"), disk_u/disk_t*100}')
BUT :  calculer le pourcentage de l'espace disque utilisé pour toutes les partitions de type /dev/, en excluant la partition /boot
## une info important ##
/boot est souvent ignoré lors des calculs d'utilisation de l'espace disque, car il contient des fichiers système essentiels au démarrage,



---------> # CPU LOAD
COMMANDE :
1) cpul=$(vmstat 1 2 | tail -1 | awk '{printf $15}')
2) cpu_op=$(expr 100 - $cpul)
3) cpu_fin=$(printf "%.1f" $cpu_op)
EXPLICATION



















